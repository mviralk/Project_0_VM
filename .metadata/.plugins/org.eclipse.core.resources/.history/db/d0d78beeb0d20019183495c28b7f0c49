package com.mistbank.main;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Scanner;

import org.apache.log4j.Logger;

import com.mistbank.dao.impl.MistbankDaoImpl;
import com.mistbank.exceptions.BusinessException;
import com.mistbank.model.CheckingAccounts;
import com.mistbank.model.MistUser;
import com.mistbank.model.SavingAccounts;
import com.mistbank.model.Transactions;
import com.mistbank.service.SHA256Demo;
import com.mistbank.service.impl.MistbankServiceImpl;

public class MistbankMain {

	private static final Logger log = Logger.getLogger(MistbankMain.class);

	public static void main(String[] args) {

		Scanner scanner = new Scanner(System.in);
		long acctnumber = 0;
		double checkbalance = 0;

		log.info("              Welcome to MistBank V1.0              ");
		log.info("====================================================");
		int ch = 0;

		do {
			log.info("Your Banking Options");
			log.info("1] Login");
			log.info("2] Register");
			log.info("3] EXIT");
			log.info("Above are you choices(1-3) ");

			try {
				ch = Integer.parseInt(scanner.nextLine());
				// Login
				switch (ch) {

				/// Check User Login
				case 1:
					MistUser loginconf = new MistUser();
					

					log.info("Please enter your Login details");
					log.info("Username: ");
					String usernamelogin = scanner.nextLine();
					// String usernamelogin = scanner.nextLine();
					log.info("Password: ");
					String passwordlogin = scanner.nextLine();
					String passwordlog = new SHA256Demo().sha256(passwordlogin);
					loginconf.setUsername(usernamelogin);
					loginconf.setPassword(passwordlog);

					MistbankServiceImpl service = new MistbankServiceImpl();

					try {
						// User Login Validated
						loginconf = service.userauth(loginconf);

						// log.info("-----------------------------------------------------------");
						int acct = 0;
						int logout = 0;
						try {
							acctnumber = service.getAccountID(loginconf.getUsername());
							checkbalance = service.getCheckingAvailableBalance(loginconf.getUsername());
						} catch (Exception e) {

						}
						
						
						// If login is validated then
						do {
							log.info("-----------------------------------------------------------");
							log.info("You have logged in successfully!");
							log.info("Enter to see the details");
							log.info("1] Checkings");
							log.info("2] Logout");
							
							
							try {
								acct = Integer.parseInt(scanner.nextLine());

								switch (acct) {
								case 1:

									/// Checking Transaction
									int check = 0;
									do {

										try {
											//System.out.println("Test 2 "+checkacct.getCheckingavailablebalance());
											System.out.println(checkbalance);

											Transactions tran = new Transactions();

											log.info("----------------------------------------------");
											log.info("You have logged in successfully!");
											log.info("Here are your updated details");
											log.info("----------------------------------------------");
											log.info("Account number " + acctnumber + " Available balance is = $"
													+ checkbalance);
											log.info(
													"======================================================================================");
											log.info("Transaction Options");
											log.info("--------------------");
											log.info("1] Deposit Money");
											log.info("2] Withdraw Money");
											log.info("3] Transfer Money");
											log.info("4] Back");
											log.info("5] Logout");
											check = Integer.parseInt(scanner.nextLine());
											// Transaction is happening here
											switch (check) {

											// Depositing Money here
											case 1:
												log.info("Total Available balance is $"
														+ checkbalance);
												// IF Deposit money
												log.info("Enter the deposit amount = $");
												double depoamt = Double.parseDouble(scanner.nextLine());

												log.info("Depositing... $" + depoamt);
												tran = new Transactions(depoamt);
												tran.setUsername(loginconf.getUsername());
												MistbankDaoImpl dao2 = new MistbankDaoImpl();

												tran = dao2.checkingtrans(tran);
												tran.setCheckingavailablebalance(depoamt);
												if (tran.getTransactionId() != 0) {
													log.info("Deposited $" + depoamt + " Successfully!");
													checkbalance = service.getCheckingAvailableBalance(loginconf.getUsername());
													log.info("Available balance: $"
															+ checkbalance);
													

												}

												break;
												// Withdraw
											case 2:
												
												Transactions tran1 = new Transactions();

												log.info("Total Available balance is $"
														+ checkbalance);
												tran1.setUsername(loginconf.getUsername());
												// IF Deposit money
												log.info("Enter the Withdraw amount = $");
												double withdrawammount = Double.parseDouble(scanner.nextLine());
												log.info("Withdraw... $" + withdrawammount);

												MistbankServiceImpl service = new MistbankServiceImpl();
												tran1 = service.checkingtrans(tran1);

												if (tran1.getTransactionId() != 0) {
													log.info("Transaction successfull");
												}
												break;
											case 3:
												log.info("Under Construction");
												break;
											case 4:
												check = 5;
												break;
											case 5:
												logout = 3;
												break;
											default:
												log.info("Please enter options(1-5) only.");
												break;
											}
										} catch (BusinessException e) {
											//log.info(e.getMessage());
											log.info("Invalid amount entered");
										}

									} while (check != 5);

									break;
								case 2:
									logout = 2;
									break;
								default:
									log.info("Please select appropriate option(1-3)");
									break;
								}
							} catch (NumberFormatException e) {
								log.info("Please select choices from above only");
							}

						} while (logout != 2);
					} catch (BusinessException e) {
						log.info("Please Enter number choices from above only");
					}

					break;

				//////////// Register
				case 2:
					int register = 0;
					do {
						log.info("Thank you for chosing MistBank");
						log.info("Which account do you want to create: ");
						log.info("1] Savings");
						log.info("2] Checking");
						log.info("3] Back");

						try {

							register = Integer.parseInt(scanner.nextLine());
							switch (register) {
							case 1:
								SavingAccounts userdetails = new SavingAccounts();
								// savings account creation
								log.info("Enter Username: ");
								String username = scanner.nextLine();
								log.info("Enter Password: ");
								String userpassword = scanner.nextLine();
								String password = new SHA256Demo().sha256(userpassword);
								log.info("Enter Firstname: ");
								String firstname = scanner.nextLine();
								log.info("Enter Lastname: ");
								String lastname = scanner.nextLine();
								log.info("Enter Date of Birth: ");
								String dob = scanner.nextLine();
								SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");

								log.info("Enter SSN: ");
								long ssn = Long.parseLong(scanner.nextLine());
								log.info("Enter Phone number: ");
								long phonenumber = Long.parseLong(scanner.nextLine());
								/////////////////////////////////////////////////

								try {
									userdetails = new SavingAccounts(username, password, firstname, lastname,
											sdf.parse(dob), ssn, phonenumber);

								} catch (ParseException e) {
									log.info("Invalid date Entered");
								}

								MistbankDaoImpl dao = new MistbankDaoImpl();
								try {
									userdetails = dao.useraccountcreatesavings(userdetails);
								} catch (BusinessException e) {
									log.info("Registration unsuccessful");
								}

								if (userdetails.getSerialnum() != 0) {
									log.info("Account registered successfully with following details");
									log.info(userdetails);
								}

								break;

							///////////////////////////////////////////////////////////////////////
							// checking registration
							case 2:
								CheckingAccounts userdetails1 = new CheckingAccounts();
								// savings account creation
								log.info("Enter Username: ");
								String username1 = scanner.nextLine();
								log.info("Enter Password: ");
								String userpassword1 = scanner.nextLine();
								String password1 = new SHA256Demo().sha256(userpassword1);
								log.info("Enter Firstname: ");
								String firstname1 = scanner.nextLine();
								log.info("Enter Lastname: ");
								String lastname1 = scanner.nextLine();
								log.info("Enter Date of Birth: ");
								String dob1 = scanner.nextLine();
								SimpleDateFormat sdf1 = new SimpleDateFormat("MM-dd-yyyy");

								log.info("Enter SSN: ");
								long ssn1 = Long.parseLong(scanner.nextLine());
								log.info("Enter Phone number: ");
								long phonenumber1 = Long.parseLong(scanner.nextLine());
								/////////////////////////////////////////////////

								try {
									userdetails1 = new CheckingAccounts(username1, password1, firstname1, lastname1,
											sdf1.parse(dob1), ssn1, phonenumber1);

								} catch (ParseException e1) {
									log.info("Invalid date Entered");
								}

								MistbankDaoImpl dao2 = new MistbankDaoImpl();
								try {
									userdetails1 = dao2.useraccountcreatechecking(userdetails1);
								} catch (BusinessException e) {
									log.info("Registration unsuccessful Username already exits");
								}

								if (userdetails1.getSerialnum() != 0) {
									log.info("Account registered successfully with following details");
									log.info(userdetails1);
								}
								log.info("Under Construction");
								break;
							case 3:
								ch = 3;
								break;
							default:
								log.info("Please select proper selection");
								break;
							}
						} catch (NumberFormatException e) {

							log.info("Choices should be number(1-3) Only");

						}

					} while (register != 3);

					break;
				case 3:
					log.info("Thank you for your visit.");
					break;
				default:
					log.info("Please Select appropriate Banking option.");
					break;
				}
			} catch (NumberFormatException e) {
				log.info("Choices should be number(1-3) ONLY");

			}

		} while (ch != 3);

		scanner.close();

	}

}
