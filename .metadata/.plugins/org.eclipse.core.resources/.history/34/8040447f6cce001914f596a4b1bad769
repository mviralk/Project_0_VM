package com.mistbank.dao.impl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.log4j.Logger;

import com.mistbank.dao.MistbankDAO;
import com.mistbank.dbutil.OracleConnection;
import com.mistbank.exceptions.BusinessException;
import com.mistbank.main.MistbankMain;
import com.mistbank.model.CheckingAccounts;
import com.mistbank.model.MistUser;
import com.mistbank.model.SavingAccounts;

public class MistbankDaoImpl implements MistbankDAO {
	private static final Logger log = Logger.getLogger(MistbankMain.class);
	@Override
	public SavingAccounts useraccountcreatesavings(SavingAccounts savingaccounts) throws BusinessException {
		try (Connection connection = OracleConnection.getConnection()) {
			String sql = "call REGISTERSAVINSUSER(?,?,?,?,?,?,?,?,?,?,?)";
			CallableStatement callablestatement = connection.prepareCall(sql);
			callablestatement.setString(1, savingaccounts.getUsername());
			callablestatement.setString(2, savingaccounts.getPassword());
			callablestatement.registerOutParameter(3, java.sql.Types.NUMERIC);
			callablestatement.setDouble(4, savingaccounts.getSavingavailablebalance());
			callablestatement.setFloat(5, savingaccounts.getSavinginterest());
			callablestatement.setString(6, savingaccounts.getFirstname());
			callablestatement.setString(7, savingaccounts.getLastname());
			callablestatement.setDate(8, new java.sql.Date(savingaccounts.getDob().getTime()));
			callablestatement.setLong(9, savingaccounts.getSsn());
			callablestatement.setLong(10, savingaccounts.getPhonenumber());
			callablestatement.registerOutParameter(11, java.sql.Types.NUMERIC);

			callablestatement.execute();
			savingaccounts.setSerialnum(callablestatement.getLong(11));
			savingaccounts.setSavingaccountnumber(callablestatement.getLong(3));

		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured");
		}
		return savingaccounts;
	}

	@Override
	public CheckingAccounts useraccountcreatechecking(CheckingAccounts checkingaccounts) throws BusinessException {
		try (Connection connection = OracleConnection.getConnection()) {

			String sql = "call REGISTERCHECKINGUSER(?,?,?,?,?,?,?,?,?,?)";
			CallableStatement callablestatement = connection.prepareCall(sql);
			callablestatement.setString(1, checkingaccounts.getUsername());
			callablestatement.setString(2, checkingaccounts.getPassword());
			callablestatement.registerOutParameter(3, java.sql.Types.NUMERIC);
			callablestatement.setDouble(4, checkingaccounts.getCheckingavailablebalance());
			callablestatement.setString(5, checkingaccounts.getFirstname());
			callablestatement.setString(6, checkingaccounts.getLastname());
			callablestatement.setDate(7, new java.sql.Date(checkingaccounts.getDob().getTime()));
			callablestatement.setLong(8, checkingaccounts.getSsn());
			callablestatement.setLong(9, checkingaccounts.getPhonenumber());
			callablestatement.registerOutParameter(10, java.sql.Types.NUMERIC);

			callablestatement.execute();
			checkingaccounts.setSerialnum(callablestatement.getLong(10));
			checkingaccounts.setCheckingaccountnumber(callablestatement.getLong(3));
			;

		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal error occured");
		}
		return checkingaccounts;
	}

	@Override
	public MistUser userauth(MistUser auth) throws BusinessException {
		try (Connection connection = OracleConnection.getConnection()) {
			String sql = "SELECT username from Mist_Login where username = ? AND userpassword = ? ";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, auth.getUsername());
			preparedStatement.setString(2, auth.getPassword());
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				auth.setUsername(resultSet.getString("username"));
				auth.setPassword(resultSet.getString("userpassword"));
			}else {
				throw new BusinessException("Invalid User ");
			}
		} catch (ClassNotFoundException | SQLException e) {
			log.info("User not found");
			throw new BusinessException("Invalid username and passord");
		}
		return auth;
	}

}
